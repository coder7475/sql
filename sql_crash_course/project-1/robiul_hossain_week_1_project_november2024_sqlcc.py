# -*- coding: utf-8 -*-
"""Robiul Hossain - Week 1 Project - November2024 - SQLCC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vrr3YY2tPa_u_CbqArNcvkZ_eqUJ4SyW

> 1. **DUPLICATE THIS COLAB TO START WORKING ON IT** Using File > Save a copy to drive.
> 2. **SHARE SETTINGS** In the new notebook, set the sharing settings to "Anyone with the link" can be a "Commenter" by clicking "Share" on the top right corner.

<center>
  <img src=https://www.tenants.org.au/sites/default/files/inline-images/Airbnb-Sydney-Harbour-Bridge-web%20copy.jpg width="400" align="center" />
</center>
<br/>

# Week 1: Launching Airbnb Sydney!!

Welcome to this first week's project for *SQL Crash Course*!

This week's lecture and material on Uplimit showed you how to retrieve data directly from a database. For this project we further your understanding of these concepts by delving a bit deeper. However, for everything covered in this project you can find related examples in our course material.

##### Prerequisite configuration
Below we install the software required to run this project. Please make sure to **RUN IT** by clicking on the play-button icon when you hover on the empty square bracket. And feel free to ignore the content of these two hidden cells.

**IMPORTANT: These cells may have to be rerun every time you are away from the notebook a long time or access notebook on a different browser or a different laptop. If you see an error that says "NameError: name 'run' is not defined" you need to run these two hidden cells again.**
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install git+https://github.com/sb2nov/sql-cc.git

import pandas as pd
from IPython.display import display, HTML
import sqlcc
from sqlcc import check

# Show all the rows (instead of only a few)
pd.set_option("display.max_rows", None)

# Set precision to max 2 decimals
pd.set_option('display.precision', 2)

# Set CSS Style for Table
# Make it work with night & light mode
# - Alternating rows
# - th elements
# - td elements
css_style = '''
<style>
  html {
    --td-font-color: black;
    --font-color: black;
    --background-color: #e0e0e0;
  }
  html[theme=dark] {
    --td-font-color: white;
    --font-color: black;
    --background-color: #6688ff;
  }
  th {
    background: #fbd44c;
    color: var(--font-color);
    font-size: 16px;
    text-align: center;
    font-weight: bold;
  }
  tr:nth-child(even) {
    background-color: var(--background-color);
    color: var(--font-color);
  }
  td {
    font-size: 14px;
    color: var(--td-font-color);
  }
</style>
'''


def run(sql_query):
  df = sqlcc.run(sql_query)

  # Puts the scrollbar next to the DataFrame
  display(HTML(css_style +
               "<div style='max-height: 500px; overflow: auto; width: fit-content; border-style: solid;" +
               " border-width: 1px; border-color: #0139fe; font-family: GT Planar,Inter,Arial,sans-serif;'>" +
               df.style.to_html() +
               "</div>"))

"""## Introduction

As the General manager for the Sydney area at Airbnb, you want to know more about the different listings of houses and rooms your team has onboarded. You have access to information regarding the **calendar**, **listings**, **reviews**, and **neighbourhoods**. Each of these have their own separate table.

<img src="https://corise.com/static/course/sql-crash-course/assets/cl9owz44x005e13a00fb5fhl0/Screen Shot 2022-10-25 at 5.42.23 PM.png" height="450">

## Running and Testing Queries

To access the data contained in these four previously mentioned tables, you need to write SQL between the triple quotation marks, like:

```
query = '''
SELECT * FROM listings
'''
run(query)
check(q1_1_1 = query)
```

Then that SQL is pulled through a `run()`-command and a `check()`-command so that you can see the output of the SQL query, and whether you wrote the expected query. This you can see after the output. If you've done it correctly, you'll see **"Your SQL query is correct!"**.
"""

### Question: q1_1_1
query = """
SELECT * FROM listings
"""

run(query)
check(q1_1_1 = query)

"""This vertically-scrollable table displays all of the data contained in the listings table. To get a more complete picture of the data, it would be great to also have an idea of how the rest of the tables look. Since we have only shown you the listings table, it is a good idea for you to explore the other three tables as well.


## Part 1: Exploring data in other tables

Modify each of the following code blocks to show data from the other three tables (just like we did for the listings table).


"""

### Question: q1_1_2a
# Instructions: Fetch data from the entire neighbourhoods table

# TO BE COMPLETED
query = """
SELECT * FROM neighbourhoods
"""

run(query)
check(q1_1_2a = query)

### Question: q1_1_2b
# Instructions: Fetch data from the entire reviews table

# TO BE COMPLETED
query = """
SELECT * FROM reviews
"""

run(query)
check(q1_1_2b = query)

### Question: q1_1_2c
# Instructions: Fetch data from the entire calendar table

# TO BE COMPLETED
query = """
SELECT * FROM calendar
"""

run(query)
check(q1_1_2c = query)

"""## Crunchin' Code

Now that you're getting a feel for the data, it's time to buckle up and write some SQL!

As we discussed in this week's material, SQL will help you answer questions about the Airbnb data quickly and at scale! Let's dive a bit deeper into our current example with you, once again, as the General manager for the newly-opened Airbnb Sydney.

_______

## Part 2: Printing list of host_id to host

Currently, the administrative system at our Airbnb Sydney office shows the host_id when the host calls our helpdesk. But this is very impersonal, and not ideal to answer the phone, “hello host_id 12345!” Due to company policy, helpdesk operators do not have access to the full database, and we also don’t have a system yet in place to offer only partial access. Still, we are determined to leave a good impression on everyone who calls us by knowing their name! One idea is to provide everyone access to a database print-out of the host_id with the host name. **Can you help us write this query to return this list?**

"""

### Question: q1_2_1
# Instructions: Fetch host_id and host from the listings table

# TO BE COMPLETED
query = """
SELECT host_id, host FROM listings
"""

run(query)
check(q1_2_1 = query)

"""Well that’s pretty useful, but not that useful! How would a helpdesk operator find a host quickly when the list is not ordered? **Let's fix the ordering by adapting the query to make it order descendingly on host_id.**

"""

### Question: q1_2_2
# Instructions:
# 1/ Fetch host_id and host from the listings table
# 2/ Make sure the output is sorted by host_id in descending order

# TO BE COMPLETED
query = """
SELECT host_id, host FROM listings ORDER BY host_id DESC
"""

run(query)
check(q1_2_2 = query)

"""---

## Part 3: Additional filters on the printed output

Unfortunately, asking employees to look at the printout of this list isn't going to be a scalable solution especially as we continually add new neighbourhoods. As a temporary solution, let's assign one neighbourhood to each of our employees so they have a smaller printout of listings to keep track of.

**How would you adapt the query to be sorted by *host_id*, to display the host_id and the host, and to be restricted to the neighbourhood_id of a particular neighbourhood, let's say number 35?**

"""

### Question: q1_2_3
# Instructions:
# 1/ Fetch only host_id, host from the listings table
# 2/ Make sure you filtered the data to just neighbourhood_id=35
# 3/ Make sure the output is sorted by host_id in descending order

# TO BE COMPLETED
query = """
SELECT host_id, host FROM listings WHERE neighbourhood_id=35 ORDER BY host_id DESC
"""

run(query)
check(q1_2_3 = query)

"""Hmmm... our business is growing day by. The number of people that we have currently employed has increased by a staggering 120%. So, in the future, there is potential to split up our list even further and divide it among many more employees who can be on-call. Our best option for now is splitting the list on the number of the neighbourhood AND room_type. **Find all the listings where we set our neighbourhood_id to 27 and "Private room".**

"""

### Question: q1_2_4
# Instructions:
# 1/ Fetch host_id, host from the listings table
# 2/ Make sure you filtered the data to just neighbourhood_id=27 and room_type='Private room'
# 3/ Make sure the output is sorted by host_id in descending order

# TO BE COMPLETED
query = """
SELECT host_id, host FROM listings WHERE neighbourhood_id=35 AND room_type='Private room' ORDER BY host_id DESC
"""

run(query)
check(q1_2_4 = query)

"""It was super helpful to have SQL skills to print out our user lists... BUT the future is digital. So let's now focus on a new type of scenario.

---

## Part 4: Maggie's question?

You're doing a shift of answering phones, and a host calls with an important question. Her name is Maggie, and she is known to us by the *listing_id* of 7581665.

She is curious whether the changes she made to the calendar on the website are reflected in our system. Maggie generally charges 300 dollars per night. She has noticed however, that she can charge a little bit more on Friday and Saturday nights. She updated the price to 350 dollars for Friday, September 9th 2022 and Saturday, September 10th in 2022. She wants to double check that change went through and if that corresponds with our database.

**Please help confirm this for Maggie by writing a query for the calendar table, to provide us with all of the calendar listings between the date of 2022-09-09 and 2022-09-11.**

"""

### Question: q1_2_5
# Instructions:
# 1/ Fetch all columns from the calendar table
# 2/ Make sure you filtered the data to dates between 2022-09-09 and 2022-09-11

# TO BE COMPLETED
query = """
SELECT * FROM calendar WHERE date >= '2022-09-09' AND date <= '2022-09-11'
"""

run(query)
check(q1_2_5 = query)

"""Now, let's add another condition to the query of the previous step. Let's filter on listing_id 7581665.

"""

### Question: q1_2_6
# Instructions:
# 1/ Fetch all columns from the calendar table
# 2/ Make sure you filtered the data to dates between 2022-09-09 and 2022-09-11
# 3/ Make sure you filtered the data to listing_id='7581665'

# TO BE COMPLETED
query = """
SELECT * FROM calendar WHERE listing_id='7581665' AND (date >= '2022-09-09' AND date <= '2022-09-11')
"""

run(query)
check(q1_2_6 = query)

"""What do you tell Maggie? Did the price update work?

----

## Part 5: Helping out Rick

You just got off a call with a dissatisfied host who has a  *listing_id* of *657377039990074158*. His name is Rick, and he was angry that no customers seemed to book his listing for the coming week (or past weeks for that matter). He wants us to promote his listing on our website more prominently, otherwise he might stop being our customer. We believe there might be some other issues at hand. Could you investigate and share us some of your findings as to why nobody is booking Rick's listing? We suggest you look at the **calendar**, **reviews**, and **listings**. Please report any findings you deem relevant.
"""

### Question: q1_2_7a
# Instructions:
# 1/ Fetch all columns from the calendar table
# 2/ Make sure you filtered the data to listing_id='657377039990074158'

# TO BE COMPLETED
query = """
SELECT * FROM calendar WHERE listing_id='657377039990074158'
"""

run(query)
check(q1_2_7a = query)

"""Looks like the apartment isn't available on any day - bummer. Let's flag this to Rick."""

### Question: q1_2_7b
# Instructions:
# 1/ Fetch all columns from the reviews table
# 2/ Make sure you filtered the data to listing_id='657377039990074158'

# TO BE COMPLETED
query = """
SELECT * FROM reviews WHERE listing_id='657377039990074158'
"""

run(query)
check(q1_2_7b = query)

"""It doesn't seem to have any past reviews either 😮 Maybe we need to help Rick get some testimonials.

"""

### Question: q1_2_7c
# Instructions:
# 1/ Fetch all columns from the listings table
# 2/ Make sure you filtered the data to listing_id='657377039990074158'

# TO BE COMPLETED
query = """
SELECT * FROM listings WHERE listing_id='657377039990074158'
"""

run(query)
check(q1_2_7c = query)

"""The contributing factors we found are: the price of his apartment is a bit steep compared to others, it has no reviews, and it is not available for booking on any of the given days this week.

## (Extra Credit) Part 6: Beat the competition!

A host calls in and is wondering how to price her listing. She wants to price her listing at least \$400 since it’s a really nice space. She’s concerned she’ll be too expensive for Airbnb Sydney, and considering a competitor VRBO. Oh no! It’s your job as GM to get her on Airbnb.
First, let’s write a query to show how many listings are greater than or equal to \$400. You are pretty sure there are some listings at her price range.
"""

### Question: q1_2_10a
# Instructions:
# 1/ Fetch all columns from the listings table
# 2/ Make sure you filter listings, having a price_in_dollar greater than or equal to 400 dollars
# 3/ Make sure you order the list by price_in_dollar ascendingly

# TO BE COMPLETED
query = """
SELECT * FROM listings WHERE price_in_dollar >= 400 ORDER BY price_in_dollar
"""

run(query)
check(q1_2_10a = query)

"""Now, we want to send her a list of listings to check out greater than or equal to \$400, but in neighborhood’s 20 and 26 (near where she lives)."""

### Question: q1_2_10b
# Instructions:
# 1/ Fetch all columns from the listings table
# 2/ Make sure you filter listings, having a price_in_dollar greater than or equal to than 400 dollars
# 3/ Make sure you filter listings also on having neighbourhood_id 20 or 26
# 4/ Make sure you order the list by price_in_dollar ascendingly

# TO BE COMPLETED
query = """
SELECT * FROM listings WHERE price_in_dollar >= 400 AND neighbourhood_id IN (20, 26) ORDER BY price_in_dollar
"""

run(query)
check(q1_2_10b = query)

"""Great, there should be a couple in those neighbourhoods! She wants to read the reviews of all these listings if possible. Can you write a query to from reviews table that returns the listings for all of these places? Anything to learn? Maybe having a pool is important :)"""

### Question: q1_2_10c
# Instructions:
# 1/ Fetch all columns from the reviews table
# 2/ Make sure you filter reviews based on listing_id: 21443493, 10729688, 9012529, 46159786, and 9376988
# 3/ Make sure you order the list by listing_id ascendingly

# TO BE COMPLETED
query = """
SELECT * FROM reviews WHERE listing_id IN (21443493, 10729688, 9012529, 46159786, 9376988) ORDER BY listing_id
"""

run(query)
check(q1_2_10c = query)

"""----

## (Extra Credit) Part 7: Money talks

Analysis reveals there seeme to be a big difference in prices per listing (up to 500x). This is to be expected since some areas are closer to points of interests and/or offer more luxury.

More expensive areas can net us higher sales since our cut/fee is a percentage of the price of the listing. However, cheaper areas potentially are more likely to be booked.

So for now we are interested in those areas to analyze their avaiblility and their potential differences.

Let's first start with the cheapest neighbourhoods. The top three cheapest are neighbourhood ids number 21, 28 and 4. Can you retrieve all the listings from these neighbourhoods?
"""

### Question: q1_2_8a
# Instructions:
# 1/ Fetch all columns from the listings table
# 2/ Make sure you filter listings based on neighbourhood_id: 21, 28, and 4

# TO BE COMPLETED
query = """
SELECT * FROM listings WHERE neighbourhood_id IN (21, 28, 4)
"""

run(query)
check(q1_2_8a = query)

"""The prices of these four listings range between 40 to 80 dollar. What about the most expensive neighbourhoods with id 1, 26 and 37? These listings are expected to be more and a lot more expensive listings so please order the list by price_in_dollar."""

### Question: q1_2_8b
# Instructions:
# 1/ Fetch all columns from the listings table
# 2/ Make sure you filter listings based on neighbourhood_id: 1, 26, and 37
# 3/ Make sure you order the list by price_in_dollar ascendingly

# TO BE COMPLETED
query = """
SELECT * FROM listings WHERE neighbourhood_id IN (1, 26, 37) ORDER BY price_in_dollar
"""

run(query)
check(q1_2_8b = query)

"""Here it's revealed that we have 9 listings, with a varied amount of prices.

Now, let's start comparing the calendar from the cheapest against the most expensive, which is available the most. The cheapest are listing_id: 22296011, 8476652, 28268415, and 40426054
"""

### Question: q1_2_9a
# Instructions:
# 1/ Fetch all columns from the calendar table
# 2/ Make sure you filter the data using the listing_ids above

# TO BE COMPLETED
query = """
SELECT * FROM calendar WHERE listing_id IN (22296011, 8476652, 28268415, 40426054)
"""

run(query)
check(q1_2_9a = query)

"""Now also let's do that for the listings from the most expensive neighbourhoods. These have the listing_id: 658279799851154919, 10549608, 41983356, 44284905, 2033151, 34027782, 46159786, 9376988, and 10111788"""

### Question: q1_2_9b
# Instructions:
# 1/ Fetch all columns from the calendar table
# 2/ Make sure you filter the data using the listing_ids above

# TO BE COMPLETED
query = """
SELECT * FROM calendar WHERE listing_id IN ( 658279799851154919, 10549608, 41983356, 44284905, 2033151, 34027782, 46159786, 9376988, 10111788)
"""

run(query)
check(q1_2_9b = query)

"""If you count all the entries by hand we find that for the least expensive neighbourhouds we have 26 days registered, of which none are available for renting, which means for the coming week we have 0% availability in the cheap neighbourhoods. However, the most expensive neighbourhoods have 62 days registered of which the coming week 4 days are available for renting, which means around 6% availability for next week.

On a larger scale these differences in availability of listings and thus revenue stream generated per listing are important. These data points might guide your focus as a General manager at Sydney Airbnb or pretty much any company which tries to make data-driven decisions.

---

# 🎉 CONGRATULATIONS

You've made it to the end of the week 1 assignment! You should be proud. Next step submit the project on the Uplimit platform by filling the form at the bottom here: https://uplimit.com/course/sql-crash-course/go/project-t2ne8

If you have any lingering questions, post them on Slack! As you know, we're always here to help.

And, if you want any additional challenge questions, check out the bonus extensions below.

---

### Bonus: Extensions
- You've heard feedback that one of the hosts is charging an exorbitant amount (5 digits) on one weekend. Can you look into the calendar table and find the listing id and the host information? Remember you have the powers of sort and limit
- Explore the data more and come up with other questions that you could answer using SQL from the data we have!
"""

# TO BE COMPLETED
# We don't check results for the bonus, because you can explore it in any directions you want!
# Also you can add as many cells at the bottom of the notebook as you like for more queries.

query = """
SELECT * FROM calendar WHERE price_in_dollar > 10000
"""

run(query)